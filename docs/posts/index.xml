<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on S. Sharma&#39;s Blog</title>
        <link>https://sshawarma.github.io/posts/</link>
        <description>Recent content in Posts on S. Sharma&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 14 Nov 2020 22:06:43 -0600</lastBuildDate>
        <atom:link href="https://sshawarma.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Unfinished Projects</title>
            <link>https://sshawarma.github.io/posts/2020/11/unfinished-projects/</link>
            <pubDate>Sat, 14 Nov 2020 22:06:43 -0600</pubDate>
            
            <guid>https://sshawarma.github.io/posts/2020/11/unfinished-projects/</guid>
            <description>Hey there.
I dropped writing for a little bit just to give myself a break and give myself some time to work on my project. Speaking of projects, this year I&amp;rsquo;ve been trying to cultivate more persistence. I feel like in the past I would start a project, go somewhat far with it, and then fail to follow through and provide something that worked the way I wanted.
More critically, I didn&amp;rsquo;t feel satisfied.</description>
            <content type="html"><![CDATA[<p>Hey there.</p>
<p>I dropped writing for a little bit just to give myself a break and give myself some time to work on my project. Speaking of projects, this year I&rsquo;ve been trying to cultivate more persistence. I feel like in the past I would start a project, go somewhat far with it, and then fail to follow through and provide something that worked the way I wanted.</p>
<p>More critically, I didn&rsquo;t feel satisfied. I wanted to make something that I could be proud of. Leaving a project unfinished is one of the worst things that anyone who works on anything — be it software, academic papers, or something in the arts — can experience. It only leaves dread and a lack of confidence. Sure, you may learn something, but you don&rsquo;t get the feeling of satisfaction of completing the project and achieving your goals.</p>
<p>/rant</p>
]]></content>
        </item>
        
        <item>
            <title>Learning Rust</title>
            <link>https://sshawarma.github.io/posts/2020/11/learning-rust/</link>
            <pubDate>Wed, 11 Nov 2020 20:47:48 -0600</pubDate>
            
            <guid>https://sshawarma.github.io/posts/2020/11/learning-rust/</guid>
            <description>Hey there.
I didn&amp;rsquo;t want to write yesterday because I was working on my project. In other news, I decided to learn a little bit of Rust through the Official Rust Book since I used to play around with the C programming language. So far, I&amp;rsquo;ve found Rust to be an interesting language that remedies some of the problems with &amp;ldquo;unsafe&amp;rdquo; languages like C while still attempting to give access to the low level.</description>
            <content type="html"><![CDATA[<p>Hey there.</p>
<p>I didn&rsquo;t want to write yesterday because I was working on my project. In other news, I decided to learn a little bit of Rust through the <a href="https://doc.rust-lang.org/stable/book/">Official Rust Book</a> since I used to play around with the C programming language. So far, I&rsquo;ve found Rust to be an interesting language that remedies some of the problems with &ldquo;unsafe&rdquo; languages like C while still attempting to give access to the low level.</p>
<p>Like C, Rust has <code>struct</code>s and <code>enum</code>s and it allows unsafe memory access through its &ldquo;unsafe&rdquo; mode. What I found quite interesting, however, was Rust&rsquo;s memory management system. Essentially, Rust remedies the issues of dangling references and data races through its concept of ownership. Essentially, every value in Rust has only <strong>one</strong> owner at a time. For example, in the code below:</p>
<p><code>let x = 23;</code></p>
<p><code>x</code> is the owner of the value <code>23</code>. With primitive types like integers (which Rust determines through type inference) ownership isn&rsquo;t a huge problem since primitives are easily able to be copied from one value to another, but with heap-allocated data types (like <code>String</code>), the concept of ownership comes into play. Let&rsquo;s say I have the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rust" data-lang="rust"><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
  <span style="color:#66d9ef">let</span> s <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;Hello&#34;</span>);
  <span style="color:#66d9ef">let</span> s2 <span style="color:#f92672">=</span> s;
  println<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;{}&#34;</span>, s);
}
</code></pre></div><p>Rust throws the following compilation error:</p>
<pre><code>error[E0382]: borrow of moved value: `s`
 --&gt; test.rs:4:18
  |
2 |   let s = String::from(&quot;Hello&quot;);
  |       - move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait
3 |   let s2 = s;
  |            - value moved here
4 |   println!(&quot;{}&quot;, s);
  |                  ^ value borrowed here after move

error: aborting due to previous error; 1 warning emitted

For more information about this error, try `rustc --explain E0382`.
</code></pre><p>Basically, this error is saying that <code>s</code> was not copied to <code>s2</code> (it doesn&rsquo;t implement the <code>Copy</code> trait — or interface — so Rust doesn&rsquo;t try to copy it), meaning instead it was <em>moved</em>. Initially, <code>s</code> pointed to &ldquo;Hello&rdquo;, but after <code>s2</code> is assigned to <code>s</code>, it takes ownership of the value and the variable <code>s</code> will be invalidated. Thus, when we try to call the <code>println!</code> macro, the Rust compiler detects that the variable has been invalidated and avoids compiling. This avoids the issue of pointer aliasing and dangling references, which are all-too-common in C programs.</p>
<p>There&rsquo;s more I could talk about, but that&rsquo;s why there is an entire book on the subject. Hopefully, I&rsquo;ll write some Rust code in the future worth sharing. :)</p>
]]></content>
        </item>
        
        <item>
            <title>Watson Time Tracker</title>
            <link>https://sshawarma.github.io/posts/2020/11/watson-time-tracker/</link>
            <pubDate>Mon, 09 Nov 2020 22:06:05 -0600</pubDate>
            
            <guid>https://sshawarma.github.io/posts/2020/11/watson-time-tracker/</guid>
            <description>I was working on my project today and I decided to try out a tool that I&amp;rsquo;ve been interested in using for a long time. Watson is a time management tracker that you can use to track how much time you spend on your projects. Today, according to Watson, I spent 1 hour and 11 minutes working on my project.
I hope to use it more to track my time and hopefully in the future I can talk about the benefits/cons of using something like Watson.</description>
            <content type="html"><![CDATA[<p>I was working on my project today and I decided to try out a tool that I&rsquo;ve been interested in using for a long time. Watson is a time management tracker that you can use to track how much time you spend on your projects. Today, according to Watson, I spent 1 hour and 11 minutes working on my project.</p>
<p>I hope to use it more to track my time and hopefully in the future I can talk about the benefits/cons of using something like Watson.</p>
]]></content>
        </item>
        
        <item>
            <title>Wikipedia Graph Update</title>
            <link>https://sshawarma.github.io/posts/2020/11/wikipedia-graph-update/</link>
            <pubDate>Sun, 08 Nov 2020 21:47:51 -0600</pubDate>
            
            <guid>https://sshawarma.github.io/posts/2020/11/wikipedia-graph-update/</guid>
            <description>I wanted to give a quick update on the project that I&amp;rsquo;ve been working on. Today, I managed to render the nodes and links on the canvas and I think I also have a better understanding of D3.js than before. Of course, I think some optimizations can be made and it can be made more graphically appealing (labels on the nodes and drag/pan/zoom are two features that I definitely want to implement soon).</description>
            <content type="html"><![CDATA[<p>I wanted to give a quick update on the project that I&rsquo;ve been working on. Today, I managed to render the nodes and links on the canvas and I think I also have a better understanding of D3.js than before. Of course, I think some optimizations can be made and it can be made more graphically appealing (labels on the nodes and drag/pan/zoom are two features that I definitely want to implement soon). In particular, I think nodes that are not within the a certain range of the current client&rsquo;s view should not be drawn onto the Canvas until the client drags the Canvas to that area (for example, if something is a few 100 pixels outside of the border, then we don&rsquo;t draw it onto the Canvas until the client is near that region).</p>
<p>That&rsquo;s all for now; I hope to give more updates tomorrow.</p>
]]></content>
        </item>
        
        <item>
            <title>Quick Update</title>
            <link>https://sshawarma.github.io/posts/2020/11/quick-update/</link>
            <pubDate>Sat, 07 Nov 2020 22:01:47 -0600</pubDate>
            
            <guid>https://sshawarma.github.io/posts/2020/11/quick-update/</guid>
            <description>Hey there.
I don&amp;rsquo;t have much to write about today so I just want to provide a brief overview of my plans for tomorrow:
 Create Canvas-based chart (I decided not to use server-side generated charts)  Add labels/images to nodes Improve Canvas resolution and performance Add drag/pan   Add tests for scrape.py and server.py Add tests and logging output for *.py and client.js  </description>
            <content type="html"><![CDATA[<p>Hey there.</p>
<p>I don&rsquo;t have much to write about today so I just want to provide a brief overview of my plans for tomorrow:</p>
<ul>
<li>Create Canvas-based chart (I decided not to use server-side generated charts)
<ul>
<li>Add labels/images to nodes</li>
<li>Improve Canvas resolution and performance</li>
<li>Add drag/pan</li>
</ul>
</li>
<li>Add tests for <code>scrape.py</code> and <code>server.py</code></li>
<li>Add tests and logging output for <code>*.py</code> and <code>client.js</code></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Fractional Knapsack</title>
            <link>https://sshawarma.github.io/posts/2020/11/fractional-knapsack/</link>
            <pubDate>Fri, 06 Nov 2020 20:17:22 -0600</pubDate>
            
            <guid>https://sshawarma.github.io/posts/2020/11/fractional-knapsack/</guid>
            <description>I wanted to explain the fractional knapsack algorithm since I recently solved a programming problem with it. However, I don&amp;rsquo;t want to try and explain the algorithm by just listing out the steps. Instead, I want to provide an intuitive description of the algorithm whereby I explain each step as we try to solve the problem.
Problem Given $n$ items each of which have a weight $w_k$ and price $p_k$, choose the items (not necessarily all) such that you choose the minimal price and the weight of the items is $\le W$.</description>
            <content type="html"><![CDATA[<p>I wanted to explain the fractional knapsack algorithm since I recently solved a programming problem with it. However, I don&rsquo;t want to try and explain the algorithm by just listing out the steps. Instead, I want to provide an intuitive description of the algorithm whereby I explain each step as we try to solve the problem.</p>
<h2 id="problem">Problem</h2>
<p>Given $n$ items each of which have a weight $w_k$ and price $p_k$, choose the items (not necessarily all) such that you choose the minimal price and the weight of the items is $\le W$.</p>
<h2 id="solution">Solution</h2>
<p>In this case, we want to do the following:</p>
<p>$$\text{minimize} \sum_{k=1}^n p_kx_k$$</p>
<p>where $x_k$ is the fraction of the item we took. We do this with the constraint that:</p>
<p>$$\sum_{k=1}^n x_kw_k = W$$</p>
<p>where $0 \le x_k \le 1$ is the fraction of the item we take.</p>
<p>Considering that each item is of weight $w_k$ and has price $p_k$, a greedy solution would be to choose the object with minimal price first. In order to choose the object of minimal weight, we can sort the objects by price per unit weight in ascending order. That way, we choose the object of minimum price each time. Thus, we sort according to $\frac{p_k}{w_k}$. Let&rsquo;s use an example. Imagine we have some items with the following weights and price and we can only carry 500 pounds:</p>
<ul>
<li>100 pounds, $30 (unit rate: \$0.3)</li>
<li>20 pounds, $5 (unit rate: \$0.25)</li>
<li>150 pounds, $25 (unit rate: \$0.17)</li>
<li>225 pounds, $15 (unit rate: \$0.07)</li>
<li>10 pounds, $2 (unit rate: \$0.20)</li>
</ul>
<p>Sorting the above list in ascending order, we get:</p>
<ul>
<li>225 pounds, $15</li>
<li>150 pounds, $25</li>
<li>10 pounds, $2</li>
<li>20 pounds, $5</li>
<li>100 pounds, $30</li>
</ul>
<p>Now, considering that we must &ldquo;fill the knapsack&rdquo; with a weight of $W$, we should continue to take as much weight as possible until we are forced to take a fraction to prevent overfilling the knapsack. So, in the example above, we would take the 225 pounds for \$15 (225 &lt; 500), the 150 pounds for \$25 (225 + 150 = 375 &lt; 500), the 10 pounds for \$2 (225 + 150 + 10 = 385 &lt; 500), and the 20 pounds for \$5 (225 + 150 + 10 + 20 = 405 &lt; 500). However, once we arrive at the 100 pound item, we are forced to take a fraction since if we take the whole 100 pounds the knapsack would fill to 505 pounds which is above the knapsack capacity. Thus, we take 95 pounds (as a fraction, that is $\frac{95}{100}$ of the item) which would mean that we would only pay $\$0.3 \times 95 = \$28.50$. Thus, in total, we would pay $\$15 + \$25 + \$2 + \$5 + \$28.50 = \$75.50$. Thus, with the fractional knapsack algorithm, we would have found the lowest price.</p>
<p>The above algorithm would run in $O(N \log N)$ if we consider that we sort the items by their price per unit and then check what fraction of the item must be added.</p>
]]></content>
        </item>
        
        <item>
            <title>Trying Server Side Charts</title>
            <link>https://sshawarma.github.io/posts/2020/11/trying-server-side-charts/</link>
            <pubDate>Thu, 05 Nov 2020 20:36:18 -0600</pubDate>
            
            <guid>https://sshawarma.github.io/posts/2020/11/trying-server-side-charts/</guid>
            <description>Hey there.
This is sort of an update to the article I wrote on trying to use D3.js network charts with canvas. However, after being away from this project for over two weeks and trying out Canvases, I realized a few things:
 Generating graphs with millions of nodes on the client side is horrible. If it were just a few thousand nodes, then it would be ok, but I&amp;rsquo;m generating so many nodes that many clients wouldn&amp;rsquo;t be able to handle it on their machine (regardless of whether we use Canvas or SVG).</description>
            <content type="html"><![CDATA[<p>Hey there.</p>
<p>This is sort of an update to the article I wrote on trying to use D3.js network charts with canvas. However, after being away from this project for over two weeks and trying out Canvases, I realized a few things:</p>
<ol>
<li>Generating graphs with millions of nodes on the client side is <em>horrible</em>. If it were just a few thousand nodes, then it would be ok, but I&rsquo;m generating so many nodes that many clients wouldn&rsquo;t be able to handle it on their machine (regardless of whether we use Canvas or SVG).</li>
<li>I&rsquo;m not sure how interactive my graph will be, so I&rsquo;m assuming for now that it&rsquo;ll be completely static.</li>
<li>Generating graphs on the server-side as an image is more effective than sending a huge list of nodes and links to the client.</li>
</ol>
<p>In the following weeks, I hope to try generating graphs on the server side and then serving it to the client.</p>
]]></content>
        </item>
        
        <item>
            <title>Why I Stopped Using Lastpass</title>
            <link>https://sshawarma.github.io/posts/2020/11/why-i-stopped-using-lastpass/</link>
            <pubDate>Wed, 04 Nov 2020 21:48:11 -0600</pubDate>
            
            <guid>https://sshawarma.github.io/posts/2020/11/why-i-stopped-using-lastpass/</guid>
            <description>For the longest time I used to use Lastpass. It&amp;rsquo;s a pretty good password manager, but over time I started to have some concerns about whether I should keep using it. So, a few months ago, I deleted my Lastpass account and decided to get a local password manager.
So, why did I do it?
Lastpass is a great password manager without a doubt. Not only is it free, but you can auto-generate secure, random passwords and with its browser extension you can auto-fill password and username fields to make logging into your accounts faster.</description>
            <content type="html"><![CDATA[<p>For the longest time I used to use Lastpass. It&rsquo;s a pretty good password manager, but over time I started to have some concerns about whether I should keep using it. So, a few months ago, I deleted my Lastpass account and decided to get a local password manager.</p>
<p>So, why did I do it?</p>
<p>Lastpass is a great password manager without a doubt. Not only is it free, but you can auto-generate secure, random passwords and with its browser extension you can auto-fill password and username fields to make logging into your accounts faster. It&rsquo;s great. However, I started to feel insecure about using Lastpass when I realized that using a <em>browser extension</em> to store my passwords is a little insecure. If a website exploited a weakness in my browser, they could potentially gain access to my passwords if I were logged into my Lastpass account. Granted, I thought, this isn&rsquo;t likely to happen since I tend to follow good security practices which means (1) not going to sketchy websites and (2) enabling my firewall when I connect to any network.</p>
<p>However, a more likely attack vector is at the company itself. You see, Lastpass doesn&rsquo;t store your passwords locally. Instead, all of your account passwords are stored in some database that Lastpass owns in some part of the world unknown to you. Considering that data breaches happen frequently and a company like Lastpass is a desirable target for any bad actor, it&rsquo;s possible that my data could be leaked in a data breach of Lastpass&rsquo;s servers. I know that Lastpass has a good reputation and that they probably follow good security practices, but I feel a little insecure entrusting the integrity of my accounts to a company.</p>
<p>As a result, I deleted my Lastpass account and found a secure local password manager that would suit my needs. Sure, it may not be as convenient as using the Lastpass browser extension, but I feel better knowing that my passwords are stored, encrypted and hashed, in a local database on my computer rather than in some database waiting to be leaked by a hacker.</p>
<p>NOTE: When choosing a local password manager, I ignored managers like 1Password and BitWarden because (1) they&rsquo;re paid and (2) they also have some of the same faults that Lastpass has.</p>
]]></content>
        </item>
        
        <item>
            <title>Combining Canvas and D3.js Network Charts</title>
            <link>https://sshawarma.github.io/posts/2020/11/combining-canvas-and-d3.js-network-charts/</link>
            <pubDate>Tue, 03 Nov 2020 18:10:06 -0600</pubDate>
            
            <guid>https://sshawarma.github.io/posts/2020/11/combining-canvas-and-d3.js-network-charts/</guid>
            <description>I&amp;rsquo;ve been working on creating a network graph to show the relationship between every single Wikipedia article. I wanted to write this article so I can walk through the problem I&amp;rsquo;m having.
The Problem Basically, when I tried to render the network chart I decided to go the conventional route and use an SVG (Scalable Vector Graphic). SVGs are awesome for rendering different types of shapes and transitions. For a typical person rendering a few nodes on a network graph, SVGs work well (not to mention that pretty much every tutorial/article on using D3.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve been working on creating a network graph to show the relationship between every single Wikipedia article. I wanted to write this article so I can walk through the problem I&rsquo;m having.</p>
<h2 id="the-problem">The Problem</h2>
<p>Basically, when I tried to render the network chart I decided to go the conventional route and use an SVG (Scalable Vector Graphic). SVGs are awesome for rendering different types of shapes and transitions. For a typical person rendering a few nodes on a network graph, SVGs work well (not to mention that pretty much every tutorial/article on using D3.js to build network graphs uses SVGs).</p>
<p>The problem is that I want to render millions of nodes with potentially millions of links and SVGs tend to perform terribly when only a few thousand nodes are rendered.</p>
<h2 id="the-solution">The Solution</h2>
<p>One solution that I&rsquo;ve found that I want to try is using the Canvas API to render the network chart while exploiting D3.js&rsquo;s data binding and force simulation capabilities to create the graph. From what I&rsquo;ve researched, the Canvas API is pretty lightweight and it (possibly) can handle drawing millions of nodes and links to the screen. With that in mind, I want to roughly outline what I&rsquo;m planning to do:</p>
<ul>
<li>Create a custom DOM element called <code>dummy</code>.</li>
<li>Under <code>dummy</code>, create classes <code>dummy.link</code> and <code>dummy.node</code> and set the appropriate attributes for these classes.</li>
<li>Run <code>forceSimulation()</code> to calculate position of nodes every time new data is added.</li>
<li>After the force simulation has run, draw the nodes on the canvas using the attributes set on <code>dummy.link</code> and <code>dummy.node</code> (which includes not only their positions but also their color, thickness, radius/length, etc).</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Writing Everyday</title>
            <link>https://sshawarma.github.io/posts/2020/11/writing-everyday/</link>
            <pubDate>Mon, 02 Nov 2020 16:17:59 -0600</pubDate>
            
            <guid>https://sshawarma.github.io/posts/2020/11/writing-everyday/</guid>
            <description>It&amp;rsquo;s been a while since I&amp;rsquo;ve written anything but I&amp;rsquo;ve decided as of today to start writing everyday for the sake of documenting the work I do and for keeping myself accountable.
That&amp;rsquo;s it.
:)</description>
            <content type="html"><![CDATA[<p>It&rsquo;s been a while since I&rsquo;ve written anything but I&rsquo;ve decided as of today to start writing everyday for the sake of documenting the work I do and for keeping myself accountable.</p>
<p>That&rsquo;s it.</p>
<p>:)</p>
]]></content>
        </item>
        
        <item>
            <title>Plotting Reddit Comment Trends With Pandas</title>
            <link>https://sshawarma.github.io/posts/2020/09/plotting-reddit-comment-trends-with-pandas/</link>
            <pubDate>Wed, 09 Sep 2020 20:29:37 -0500</pubDate>
            
            <guid>https://sshawarma.github.io/posts/2020/09/plotting-reddit-comment-trends-with-pandas/</guid>
            <description>Hey there!
I wanted to learn more about Pandas, a Python library for data analysis, so I decided to embark on a mini-project to experiment with it. If you use Reddit, you&amp;rsquo;ve probably seen a chain of comments like below:
Clearly, you can see that there&amp;rsquo;s a pattern in the number of upvotes. Every reply to the parent comment receives less upvotes compared to the previous reply. It would be interesting to create a bar graph, comparing the number of upvotes the parent comment received, the number of upvotes the first reply received, the number of upvotes the second reply received, &amp;hellip;, the number of upvotes the nth reply received.</description>
            <content type="html"><![CDATA[<p>Hey there!</p>
<p>I wanted to learn more about Pandas, a Python library for data analysis, so I decided to embark on a mini-project to experiment with it. If you use Reddit, you&rsquo;ve probably seen a chain of comments like below:</p>
<p><img src="/reddit-comment-chain.png" alt=""></p>
<p>Clearly, you can see that there&rsquo;s a pattern in the number of upvotes. Every reply to the parent comment receives less upvotes compared to the previous reply. It would be interesting to create a bar graph, comparing the number of upvotes the parent comment received, the number of upvotes the first reply received, the number of upvotes the second reply received, &hellip;, the number of upvotes the <code>nth</code> reply received. Using Reddit&rsquo;s API and Pandas, I implemented a program that would do just that. You can find it on GitHub <a href="https://github.com/sshawarma/comment_analyzer">here</a>.</p>
<p>First, we need to import the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> praw
<span style="color:#f92672">import</span> pandas <span style="color:#f92672">as</span> pd
<span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#f92672">as</span> plt
<span style="color:#f92672">import</span> sys
<span style="color:#f92672">import</span> math
<span style="color:#f92672">from</span> concurrent.futures <span style="color:#f92672">import</span> ThreadPoolExecutor
</code></pre></div><p>PRAW is a Python wrapper for Reddit&rsquo;s API. <code>matplotlib</code> is a library for creating static, animated, and interactive visualizations in Python. These imports will become clearer as we move on.</p>
<p>Next, we need to define authenticate to Reddit&rsquo;s API. PRAW allows us to do this pretty easily with OAuth2:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Authenticate using our client secret</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">authenticate</span>():
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;client_secret.txt&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
        data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>split()
        CLIENT_ID <span style="color:#f92672">=</span> data[<span style="color:#ae81ff">0</span>]
        CLIENT_SECRET <span style="color:#f92672">=</span> data[<span style="color:#ae81ff">1</span>]

    <span style="color:#66d9ef">return</span> praw<span style="color:#f92672">.</span>Reddit(client_id<span style="color:#f92672">=</span>CLIENT_ID,
                    client_secret<span style="color:#f92672">=</span>CLIENT_SECRET,
                    user_agent<span style="color:#f92672">=</span>USER_AGENT)
</code></pre></div><p>In this case, the client ID and client secret is stored in a file (called <code>client_secret.txt</code>). We read this and return an instance of PRAW&rsquo;s <code>Reddit</code> class, which allows us to interact with Reddit&rsquo;s APIs.</p>
<p>Now, we break down what we have to do in logical chunks. First, we need to get a list of submissions, so that we can look at the comments under each post. PRAW allows us to get a list of the hottest submissions from r/all, which is basically an amalgamation of a bunch of submissions from different subreddits:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_submission_upvotes</span>(reddit, m, n):
    upvotes_list <span style="color:#f92672">=</span> []
    submissions <span style="color:#f92672">=</span> list(reddit<span style="color:#f92672">.</span>subreddit(<span style="color:#e6db74">&#39;all&#39;</span>)<span style="color:#f92672">.</span>hot(limit<span style="color:#f92672">=</span>m))
    <span style="color:#66d9ef">with</span> ThreadPoolExecutor() <span style="color:#66d9ef">as</span> executor:
        futures <span style="color:#f92672">=</span> [executor<span style="color:#f92672">.</span>submit(count_upvotes, submissions[i], n) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, m)]
        [upvotes_list<span style="color:#f92672">.</span>append(future<span style="color:#f92672">.</span>result()) <span style="color:#66d9ef">for</span> future <span style="color:#f92672">in</span> futures]
    <span style="color:#66d9ef">return</span> upvotes_list
</code></pre></div><p>The reason we use <code>concurrent.futures</code> is because, depending on the length of the comment chain we are examining, we might end up taking very long to collect upvotes on one submission but a very short time to collect upvotes on another submission (we will see what the <code>count_upvotes</code> function does next). Here, <code>m</code> represents the number of submissions to look at and <code>n</code> represents the number of comments in a comment chain to examine.</p>
<p>Next, we need to count the number of upvotes of each comment in a comment chain in each submission. This can be done as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_upvotes</span>(submission, n):
    upvotes <span style="color:#f92672">=</span> []
    submission<span style="color:#f92672">.</span>comments<span style="color:#f92672">.</span>replace_more(limit<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)

    count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    comment <span style="color:#f92672">=</span> submission<span style="color:#f92672">.</span>comments[<span style="color:#ae81ff">0</span>]
    <span style="color:#66d9ef">while</span> count <span style="color:#f92672">&lt;</span> n:
        upvotes<span style="color:#f92672">.</span>append(comment<span style="color:#f92672">.</span>score)
        count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">if</span> len(comment<span style="color:#f92672">.</span>replies) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
            comment <span style="color:#f92672">=</span> comment<span style="color:#f92672">.</span>replies[<span style="color:#ae81ff">0</span>]
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">break</span>

    <span style="color:#66d9ef">while</span> len(upvotes) <span style="color:#f92672">&lt;</span> n:
        upvotes<span style="color:#f92672">.</span>append(float(<span style="color:#e6db74">&#39;nan&#39;</span>))
    <span style="color:#66d9ef">return</span> upvotes
</code></pre></div><p>In essence, we get the top comment and keep examining each reply until we have gotten <code>n</code> comments or until the comment chain ends (to get more comment chains of length <code>n</code>, we can increase <code>m</code>). If the comment chain ends prematurely, we add <code>nan</code> (Not a Number) to indicate that no data was collected for the particular reply in the comment chain because that reply did not exist (the comment chain ended, so there were no more upvotes to count).</p>
<p>After counting the upvotes of each comment in the top comment chain, we only have to process the data. First, we compute the average number of upvotes for the top comments, the 1st reply, the 2nd reply, etc:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">compute_data</span>(upvotes_list):
    avg_upvotes <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> col <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(upvotes_list[<span style="color:#ae81ff">0</span>])):
        avg <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0</span>
        n <span style="color:#f92672">=</span> len(upvotes_list)
        <span style="color:#66d9ef">for</span> row <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(upvotes_list)):
            <span style="color:#66d9ef">if</span> math<span style="color:#f92672">.</span>isnan(upvotes_list[row][col]) <span style="color:#f92672">==</span> False:
                avg <span style="color:#f92672">+=</span> upvotes_list[row][col]
            <span style="color:#66d9ef">else</span>:
                n <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">if</span> n <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
            avg_upvotes<span style="color:#f92672">.</span>append(avg <span style="color:#f92672">/</span> n)
        <span style="color:#66d9ef">else</span>:
            avg_upvotes<span style="color:#f92672">.</span>append(<span style="color:#ae81ff">0</span>)
    <span style="color:#66d9ef">return</span> avg_upvotes
</code></pre></div><p>We return a list called <code>avg_upvotes</code>, which contains the average number of upvotes for the top comment, first reply, second reply, etc. We now convert this list into a bar graph:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">render_data</span>(avg_upvotes, n):
    <span style="color:#75715e"># Solution from https://stackoverflow.com/questions/9647202/ordinal-numbers-replacement</span>
    ordinal <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> n: <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%d%s</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> (n,<span style="color:#e6db74">&#34;tsnrhtdd&#34;</span>[(n<span style="color:#f92672">//</span><span style="color:#ae81ff">10</span><span style="color:#f92672">%</span><span style="color:#ae81ff">10</span><span style="color:#f92672">!=</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(n<span style="color:#f92672">%</span><span style="color:#ae81ff">10</span><span style="color:#f92672">&lt;</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">*</span>n<span style="color:#f92672">%</span><span style="color:#ae81ff">10</span>::<span style="color:#ae81ff">4</span>])
    x <span style="color:#f92672">=</span> [str(ordinal(i)) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, n)]
    df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({<span style="color:#e6db74">&#39;Comment Reply Number&#39;</span>: x, <span style="color:#e6db74">&#39;Average Upvotes&#39;</span>: avg_upvotes})
    df<span style="color:#f92672">.</span>plot<span style="color:#f92672">.</span>bar(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Comment Reply Number&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Average Upvotes&#39;</span>, rot<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, legend<span style="color:#f92672">=</span>False)
    plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Comment Reply Number&#39;</span>)
    plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Average Upvotes&#39;</span>)
    plt<span style="color:#f92672">.</span>xticks(size<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
    plt<span style="color:#f92672">.</span>yticks(size<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
    plt<span style="color:#f92672">.</span>show()
</code></pre></div><p>Now all we have to do is put it together:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    <span style="color:#66d9ef">if</span> len(sys<span style="color:#f92672">.</span>argv) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;./comment_analyzer.py [number of submissions to analyze] [number of comments]&#39;</span>)
        exit()
    m <span style="color:#f92672">=</span> int(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>])
    n <span style="color:#f92672">=</span> int(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">2</span>])
    reddit <span style="color:#f92672">=</span> authenticate()
    upvotes_list <span style="color:#f92672">=</span> get_submission_upvotes(reddit, m, n)
    avg_upvotes <span style="color:#f92672">=</span> compute_data(upvotes_list)
    render_data(avg_upvotes, n)
</code></pre></div><p>The program takes two parameters: the number of submissions to look at and the &ldquo;depth&rdquo; of the comment chain we have to look at.</p>
<p>Running the program (assuming you have the necessary libraries installed with Python 3.6+), you get a bar graph like so:</p>
<p><img src="/pandas.png" alt="a right-skewed bar graph"></p>
<p>(The &ldquo;0th&rdquo; comment represents the top comment).</p>
<p>The above graph allows us to visualize the distribution of upvotes on comments on Reddit. Clearly, the distribution is right-skewed: the number of upvotes diminish as we get deeper down the reply chain. This is to be expected, since the top comment tends to be seen first.</p>
<p>Hopefully, you can see how tools like Pandas and PRAW allow us to collect data and visualize it.</p>
]]></content>
        </item>
        
        <item>
            <title>Using Hugo With Github Pages</title>
            <link>https://sshawarma.github.io/posts/2020/09/using-hugo-with-github-pages/</link>
            <pubDate>Sat, 05 Sep 2020 20:41:21 -0500</pubDate>
            
            <guid>https://sshawarma.github.io/posts/2020/09/using-hugo-with-github-pages/</guid>
            <description>Hey there!
I just moved my blog from Jekyll to Hugo and I wanted to give a quick tutorial on how to use Hugo with GitHub pages.
Installation First, you&amp;rsquo;ll need to install Hugo:
MacOS: brew install hugo
Linux: brew install hugo (Here&amp;rsquo;s a link on how to install brew for Linux)
Windows: choco install hugo -confirm or scoop install hugo
Note: You may need to install Go.
Hugo on GitHub Pages Installing Hugo for GitHub Pages is pretty simple.</description>
            <content type="html"><![CDATA[<p>Hey there!</p>
<p>I just moved my blog from Jekyll to Hugo and I wanted to give a quick tutorial on how to use Hugo with GitHub pages.</p>
<h2 id="installation">Installation</h2>
<p>First, you&rsquo;ll need to install Hugo:</p>
<p>MacOS: <code>brew install hugo</code></p>
<p>Linux: <code>brew install hugo</code> (Here&rsquo;s a link on <a href="https://docs.brew.sh/Homebrew-on-Linux">how to install <code>brew</code> for Linux</a>)</p>
<p>Windows: <code>choco install hugo -confirm</code> or <code>scoop install hugo</code></p>
<p><em>Note: You may need to install Go.</em></p>
<h2 id="hugo-on-github-pages">Hugo on GitHub Pages</h2>
<p>Installing Hugo for GitHub Pages is pretty simple. First, we will create a new directory (I&rsquo;ll refer to this directory as <code>mysite</code>). Then, type the following commands:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">&gt; hugo new site mysite
&gt; cd mysite
</code></pre></div><p>If you type <code>ls</code>, you&rsquo;ll see a bunch of files in this directory. The only one we care about for now is <code>config.toml</code>. Go to <code>config.toml</code> and find the line that says <code>publishDir = public</code> (or add it somewhere if it&rsquo;s not present). Set <code>publishDir</code> to <code>docs</code>. This will be the root directory that GitHub pages will use to deploy our site. Also, find the line with the parameter <code>baseURL</code> and set <code>baseURL = https://&lt;YOUR-USERNAME&gt;.github.io</code> where <code>&lt;YOUR-USERNAME&gt;</code> is your GitHub username.</p>
<p>Now, type the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">&gt; hugo server -D
</code></pre></div><p>Go to <a href="https://localhost:1313">https://localhost:1313/</a> and confirm that your site is running properly. Then, go to GitHub and make a new repository called <code>&lt;YOUR-USERNAME&gt;.github.io</code>. Once you do that, go to the <strong>Settings</strong> tab and scroll down to the section that says <strong>GitHub Pages</strong>. Under the <strong>Source</strong> heading, use the dropdown to select the <code>/docs</code> option. This will inform GitHub Pages that the root directory for your site is under the <code>docs</code> subdirectory. Finally, click the <strong>Save</strong> button.</p>
<p><img src="/github-pages.png" alt="test"></p>
<p>All we have to do now is push your site to the repository. Type the following commands (you&rsquo;re still in the <code>mysite/</code> folder at this point):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">&gt; cd ../
&gt; git clone https://&lt;YOUR-USERNAME&gt;.github.io
&gt; cp -r mysite/ &lt;YOUR-USERNAME&gt;.github.io
&gt; rm -rf mysite/
&gt; cd &lt;YOUR-USERNAME&gt;.github.io
&gt; hugo
&gt; cd docs
&gt; git add .
&gt; git commit -m <span style="color:#e6db74">&#34;My Hugo Site&#34;</span> <span style="color:#75715e"># or whatever you want your commit message to be...</span>
&gt; git push origin master
</code></pre></div><p>&hellip;and that&rsquo;s it! The above commands clone your repository, copy the files from <code>mysite/</code> to <code>&lt;YOUR-USERNAME&gt;.github.io/</code>, generate the root directory (<code>docs</code>) using the <code>Hugo</code> command, and then commit and push your site to the <code>master</code> branch.</p>
<p>Likely, you&rsquo;ll be making a lot of changes to your Hugo site. In that case, you&rsquo;ll want a shell script to streamline the process. The following bash script does that:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>
<span style="color:#75715e"># If a command fails then the deploy stops</span>
set -e

printf <span style="color:#e6db74">&#34;\033[0;32mDeploying updates to GitHub...\033[0m\n&#34;</span>

<span style="color:#75715e"># Build the project.</span>
hugo <span style="color:#75715e"># if using a theme, replace with `hugo -t &lt;YOURTHEME&gt;`</span>

<span style="color:#75715e"># Go To docs folder</span>
cd docs

<span style="color:#75715e"># Add changes to git.</span>
git add .

<span style="color:#75715e"># Commit changes.</span>
msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rebuilding site </span><span style="color:#66d9ef">$(</span>date<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -n <span style="color:#e6db74">&#34;</span>$*<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$*<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">fi</span>
git commit -m <span style="color:#e6db74">&#34;</span>$msg<span style="color:#e6db74">&#34;</span>

<span style="color:#75715e"># Push source and build repos.</span>
git push origin master
</code></pre></div><p>The above was taken from a post by Hugo for deploying your website to GitHub pages, which I <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">recommend reading</a> for more information on how to add posts, customize/create themes, and write your own templates.</p>
]]></content>
        </item>
        
    </channel>
</rss>
